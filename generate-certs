#!/bin/bash

if [[ -z $SILENT ]]; then
echo "----------------------------"
echo "| OMGWTFSSL Cert Generator |"
echo "----------------------------"
echo
fi

export CA_KEY=${CA_KEY-"ca-key.pem"}
export CA_CERT=${CA_CERT-"ca.pem"}
export CA_SUBJECT=${CA_SUBJECT:-"test-ca"}
export CA_EXPIRE=${CA_EXPIRE:-"60"}

export SSL_CONFIG=${SSL_CONFIG:-"openssl.cnf"}
export SSL_KEY=${SSL_KEY:-"key.pem"}
export SSL_CSR=${SSL_CSR:-"key.csr"}
export SSL_CERT=${SSL_CERT:-"cert.pem"}
export SSL_SIZE=${SSL_SIZE:-"2048"}
export SSL_EXPIRE=${SSL_EXPIRE:-"60"}

export SSL_SUBJECT=${SSL_SUBJECT:-"example.com"}
export SSL_DNS=${SSL_DNS}
export SSL_IP=${SSL_IP}
export SSL_CRL=${SSL_CRL}
export SSL_OCSP=${SSL_OCSP}

export OUTPUT=${OUTPUT:-"yaml"}

[[ -z $SILENT ]] && echo "--> Certificate Authority"

if [[ -e ./${CA_KEY} ]]; then
    [[ -z $SILENT ]] && echo "====> Using existing CA Key ${CA_KEY}"
else
    [[ -z $SILENT ]] && echo "====> Generating new CA key ${CA_KEY}"
    openssl genrsa -out ${CA_KEY} ${SSL_SIZE} > /dev/null
fi

touch .db.pem{,.attr}
[ ! -f .crlnumber ] && echo 1000 > .crlnumber

cat > ${SSL_CONFIG} <<EOM
default_ca	= CA_default		# The default ca section

[ policy ]

[ CA_default ]
database = .db.pem
crlnumber = .crlnumber
serial          = .serial

default_crl_days= 30			# how long before next CRL
default_md	= default		# use public key default MD
policy = policy
unique_subject = no
EOM

if [[ ${SSL_CRL} ]] || [[ ${SSL_OCSP} ]]; then

cat >> ${SSL_CONFIG} <<EOM
[ v3_ca ]
EOM

fi

if [[ ${SSL_CRL} ]]; then
    echo "crlDistributionPoints = @crl_section" >> ${SSL_CONFIG}
fi

if [[ ${SSL_OCSP} ]]; then
    echo "authorityInfoAccess = @ocsp_section" >> ${SSL_CONFIG}
fi

cat >> ${SSL_CONFIG} <<EOM

[ crl_ext ]
authorityKeyIdentifier=keyid:always,issuer:always
[req]
req_extensions = v3_req
distinguished_name = req_distinguished_name
[req_distinguished_name]
[ v3_req ]
basicConstraints = CA:FALSE
keyUsage = nonRepudiation, digitalSignature, keyEncipherment
extendedKeyUsage = serverAuth
EOM


if [[ ${SSL_CRL} ]]; then
    echo "crlDistributionPoints = @crl_section" >> ${SSL_CONFIG}
fi

if [[ ${SSL_OCSP} ]]; then
    echo "authorityInfoAccess = @ocsp_section" >> ${SSL_CONFIG}
fi


if [[ -n ${SSL_DNS} || -n ${SSL_IP} ]]; then
    cat >> ${SSL_CONFIG} <<EOM
subjectAltName = @alt_names
[alt_names]
EOM

    IFS=","
    dns=(${SSL_DNS})
    dns+=(${SSL_SUBJECT})
    for i in "${!dns[@]}"; do
      echo DNS.$((i+1)) = ${dns[$i]} >> ${SSL_CONFIG}
    done

    if [[ -n ${SSL_IP} ]]; then
        ip=(${SSL_IP})
        for i in "${!ip[@]}"; do
          echo IP.$((i+1)) = ${ip[$i]} >> ${SSL_CONFIG}
        done
    fi
fi


if [[ ${SSL_CRL} ]] || [[ ${SSL_OCSP} ]]; then

    echo "[ usr_cert ]" >> ${SSL_CONFIG}
    echo "basicConstraints = CA:FALSE" >> ${SSL_CONFIG}
    echo "keyUsage = nonRepudiation, digitalSignature, keyEncipherment" >> ${SSL_CONFIG}
    echo "extendedKeyUsage = clientAuth" >> ${SSL_CONFIG}
    echo "crlDistributionPoints = @crl_section" >> ${SSL_CONFIG}
    echo "authorityInfoAccess = @ocsp_section" >> ${SSL_CONFIG}

fi

if [[ ${SSL_CRL} ]]; then
    echo "[ crl_section ]" >> ${SSL_CONFIG}

    IFS=","
    crl=(${SSL_CRL})
    for i in "${!crl[@]}"; do
    echo URI.$((i+1)) = ${crl[$i]} >> ${SSL_CONFIG}
    done
    
fi

if [[ ${SSL_OCSP} ]]; then
    echo "[ ocsp_section ]" >> ${SSL_CONFIG}

    IFS=","
    ocsp=(${SSL_OCSP})
    for i in "${!ocsp[@]}"; do
    echo OCSP\;URI.$((i+1)) = ${ocsp[$i]} >> ${SSL_CONFIG}
    done
    
cat >> ${SSL_CONFIG} <<EOM
[ v3_OCSP ]
basicConstraints = CA:FALSE
keyUsage = nonRepudiation, digitalSignature, keyEncipherment
extendedKeyUsage = OCSPSigning
EOM
    
fi


if [[ -e ./${CA_CERT} ]]; then
    [[ -z $SILENT ]] && echo "====> Using existing CA Certificate ${CA_CERT}"
else
    [[ -z $SILENT ]] && echo "====> Generating new CA Certificate ${CA_CERT}"
    
    if [[ ${SSL_CRL} ]]; then
        openssl req -x509 -new -nodes -key ${CA_KEY} -days ${CA_EXPIRE} -out ${CA_CERT} -subj "/CN=${CA_SUBJECT}" -config ${SSL_CONFIG} -extensions v3_ca  > /dev/null  || exit 1
    else
        openssl req -x509 -new -nodes -key ${CA_KEY} -days ${CA_EXPIRE} -out ${CA_CERT} -subj "/CN=${CA_SUBJECT}"> /dev/null  || exit 1
    fi
fi

echo "====> Generating new config file ${SSL_CONFIG}"


[[ -z $SILENT ]] && echo "====> Generating new SSL KEY ${SSL_KEY}"
openssl genrsa -out ${SSL_KEY} ${SSL_SIZE} > /dev/null || exit 1

[[ -z $SILENT ]] && echo "====> Generating new SSL CSR ${SSL_CSR}"
openssl req -new -key ${SSL_KEY} -out ${SSL_CSR} -subj "/CN=${SSL_SUBJECT}" -config ${SSL_CONFIG} > /dev/null || exit 1

[[ -z $SILENT ]] && echo "====> Generating new SSL CERT ${SSL_CERT}"
# openssl x509 -req -in ${SSL_CSR} -CA ${CA_CERT} -CAkey ${CA_KEY} -CAcreateserial -out ${SSL_CERT} \
#     -days ${SSL_EXPIRE} -extensions v3_req -extfile ${SSL_CONFIG} > /dev/null || exit 1

for f in .db*; do mv $f ${f}2; touch $f; done #OpenSSL bug WTF?

openssl ca -batch -config ${SSL_CONFIG} -keyfile ${CA_KEY} -cert ${CA_CERT} -outdir . -in ${SSL_CSR} -out ${SSL_CERT} -extensions v3_req -create_serial -extfile ${SSL_CONFIG} -days ${SSL_EXPIRE} -notext

for f in .db*2; do cat $f ${f::-1} > ${f}3; rm ${f::-1} && rm $f ; mv ${f}3 ${f::-1} ; done #OpenSSL bug WTF?

if [[ -z $SILENT ]]; then
echo "====> Complete"
echo "keys can be found in volume mapped to $(pwd)"
echo

if [[ ${OUTPUT} == "k8s" ]]; then
  echo "====> Output results as base64 k8s secrets"
  echo "---"
  cat << EOM
apiVersion: v1
kind: Secret
metadata:
  name: omgwtfssl 
  namespace: default
type: kubernetes.io/tls
data:
EOM

  echo -n "  ca_key: "
  cat $CA_KEY | base64 | tr '\n' ',' | sed 's/,//g'
  echo 
  echo -n "  ca_cert: "
  cat $CA_CERT | base64 | tr '\n' ',' | sed 's/,//g'
  echo 
  echo -n "  ssl_key: "
  cat $SSL_KEY | base64 | tr '\n' ',' | sed 's/,//g'
  echo 
  echo  -n "  ssl_csr: "
  cat $SSL_CSR | base64 | tr '\n' ',' | sed 's/,//g'
  echo 
  echo -n "  ssl_cert: "
  cat $SSL_CERT | base64 | tr '\n' ',' | sed 's/,//g'
  echo 

else
  echo "====> Output results as YAML"
  echo "---"
  echo "ca_key: |"
  cat $CA_KEY | sed 's/^/  /'
  echo
  echo "ca_cert: |"
  cat $CA_CERT | sed 's/^/  /'
  echo
  echo "ssl_key: |"
  cat $SSL_KEY | sed 's/^/  /'
  echo
  echo "ssl_csr: |"
  cat $SSL_CSR | sed 's/^/  /'
  echo
  echo "ssl_cert: |"
  cat $SSL_CERT | sed 's/^/  /'
  echo
fi
fi
